name: Django CI - SpendyByte

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USER: ${{ secrets.DATABASE_USER }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      TEST_DATABASE_NAME: ${{ secrets.TEST_DATABASE_NAME }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.11]

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ secrets.TEST_DATABASE_NAME }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_USER: ${{ secrets.DATABASE_USER }}
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Check and Create Database
        run: |
          python <<EOF
          import psycopg2

          conn = psycopg2.connect(
            host='localhost',
            port='5432',
            user='${{ secrets.DATABASE_USER }}',
            password='${{ secrets.DATABASE_PASSWORD }}'
          )
          cursor = conn.cursor()

          # Check if database exists
          cursor.execute("""
            SELECT EXISTS(SELECT 1 FROM pg_catalog.pg_database WHERE datname = '${{ secrets.DATABASE_USER }}');
          """)
          exists = cursor.fetchone()[0]

          if not exists:
            cursor.execute("CREATE DATABASE test_spendybyte")
            conn.commit()
            print("Database created successfully")
          else:
            print("Database already exists")

          cursor.close()
          conn.close()
          EOF
      - name: Make Migrations
        run: python manage.py makemigrations
      - name: Migrate
        run: python manage.py migrate
      - name: List tables
        run: |
          python <<EOF
          import psycopg2

          # Establish connection to the PostgreSQL database
          conn = psycopg2.connect(
              host='localhost',
              port='5432',
              user='${{ secrets.DATABASE_USER }}',
              password='${{ secrets.DATABASE_PASSWORD }}',
              database='${{ secrets.TEST_DATABASE_NAME }}'
          )
          cursor = conn.cursor()

          # Execute SQL query to retrieve table names
          cursor.execute("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'")

          # Fetch all rows from the result set
          tables = cursor.fetchall()

          # Print the list of tables
          print("List of tables:")
          for table in tables:
              print(table[0])

          # Close cursor and connection
          cursor.close()
          conn.close()
          EOF
      - name: Run Tests
        run: |
          pytest
